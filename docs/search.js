window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "jinnax.data", "modulename": "jinnax.data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "jinnax.data.generate_PINNdata", "modulename": "jinnax.data", "qualname": "generate_PINNdata", "kind": "function", "doc": "<h2 id=\"generate-spatio-temporal-data-in-a-d-dimensional-cube-for-pinn-simulation\">Generate spatio-temporal data in a d-dimensional cube for PINN simulation</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>u</strong> (function):\nThe function u(x,t) solution of the PDE</li>\n<li><strong>xl</strong> (float):\nLower bound of each x coordinate</li>\n<li><strong>xu</strong> (float):\nUpper bound of each x coordinate</li>\n<li><strong>tl</strong> (float):\nLower bound of the time interval</li>\n<li><strong>tu</strong> (float):\nUpper bound of the time interval</li>\n<li><strong>Ns</strong> (int, None):\nNumber of points along each x coordinate for sensor data. None for not generating sensor data</li>\n<li><strong>Nts</strong> (int, None):\nNumber of points along the time axis for sensor data. None for not generating sensor data</li>\n<li><strong>Nb</strong> (int, None):\nNumber of points along each x coordinate for boundary data. None for not generating boundary data</li>\n<li><strong>Ntb</strong> (int, None):\nNumber of points along the time axis for boundary data. None for not generating boundary data</li>\n<li><strong>N0</strong> (int, None):\nNumber of points along each x coordinate for initial data. None for not generating initial data</li>\n<li><strong>Nc</strong> (int, None):\nNumber of points along each x coordinate for collocation points. None for not generating collocation points</li>\n<li><strong>Ntc</strong> (int, None):\nNumber of points along the time axis for collocation points. None for not generating collocation points</li>\n<li><strong>train</strong> (logical):\nWhether to generate train (True) or test (False) data. Only sensor data is generated for test data. Default True</li>\n<li><strong>d</strong> (int):\nDomain dimension. Default 1</li>\n<li><strong>p</strong> (int):\nOutput dimension. Default 1</li>\n<li><strong>poss</strong> (str):\nPosition of sensor data in spatial domain. Either 'grid' or 'random' for uniform sampling. Default 'grid'</li>\n<li><strong>posts</strong> (str):\nPosition of sensor data in the time interval. Either 'grid' or 'random' for uniform sampling. Default 'grid'</li>\n<li><strong>posb</strong> (int):\nPosition of boundary data in spatial domain. Either 'grid' or 'random' for uniform sampling. Default 'grid'</li>\n<li><strong>postb</strong> (int):\nPosition of boundary data in the time interval. Either 'grid' or 'random' for uniform sampling. Default 'grid'</li>\n<li><strong>pos0</strong> (int):\nPosition of initial data in spatial domain. Either 'grid' or 'random' for uniform sampling. Default 'grid'</li>\n<li><strong>posc</strong> (str):\nPosition of the collocation points in the x domain. Either 'grid' or 'random' for uniform sampling. Default 'grid'</li>\n<li><strong>postc</strong> (str):\nPosition of the collocation points in the time interval. Either 'grid' or 'random' for uniform sampling. Default 'grid'</li>\n<li><strong>sigmas</strong> (str):\nStandard deviation of the Gaussian noise of sensor data. Default 0</li>\n<li><strong>sigmab</strong> (str):\nStandard deviation of the Gaussian noise of boundary data. Default 0</li>\n<li><strong>sigma0</strong> (str):\nStandard deviation of the Gaussian noise of initial data. Default 0</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict-like object with generated data</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">u</span>,</span><span class=\"param\">\t<span class=\"n\">xl</span>,</span><span class=\"param\">\t<span class=\"n\">xu</span>,</span><span class=\"param\">\t<span class=\"n\">tl</span>,</span><span class=\"param\">\t<span class=\"n\">tu</span>,</span><span class=\"param\">\t<span class=\"n\">Ns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">Nts</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">Nb</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">Ntb</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">N0</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">Nc</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">Ntc</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">train</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">poss</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">posts</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pos0</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">posb</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postb</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">posc</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">postc</span><span class=\"o\">=</span><span class=\"s1\">&#39;grid&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sigmas</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">sigmab</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">sigma0</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.data.read_data_frame", "modulename": "jinnax.data", "qualname": "read_data_frame", "kind": "function", "doc": "<h2 id=\"read-a-data-file-and-convert-to-jax-array\">Read a data file and convert to JAX array.</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file</strong> (str):\nFile name with extension .csv, .txt, .xls or .xlsx</li>\n<li><strong>sep</strong> (str):\nSeparation character for .csv and .txt files. Default ',' for .csv and ' ' for .txt</li>\n<li><strong>header</strong> (int, Sequence of int, \u2018infer\u2019 or None):\nSee pandas.read_csv documentation. Default 'infer'</li>\n<li><strong>sheet</strong> (int):\nSheet number for .xls and .xlsx files. Default 0</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>a JAX numpy array</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span>, </span><span class=\"param\"><span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">header</span><span class=\"o\">=</span><span class=\"s1\">&#39;infer&#39;</span>, </span><span class=\"param\"><span class=\"n\">sheet</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax", "modulename": "jinnax", "kind": "module", "doc": "<p>Python package <code>jinnax</code> provides functions to generate synthetic data and easily train\nPhysics-informed Neural Networks in <code>JAX</code>. It has the modules <code>data</code> and <code>nn</code> for data generation\nand neural network training.</p>\n\n<p>A tutorial of <code>jinnax</code> is available at <a href=\"https://colab.research.google.com/github/dmarcondes/JINNAX/blob/master/Tutorial_PINN_simulation_with_JINNAX.ipynb\">Google Colab</a>\nwhere more details about its data generating and training functions can be found.</p>\n"}, {"fullname": "jinnax.nn", "modulename": "jinnax.nn", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "jinnax.nn.MSE", "modulename": "jinnax.nn", "qualname": "MSE", "kind": "function", "doc": "<h6 id=\"mean-square-error\">Mean square error</h6>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pred</strong> (jax.numpy.array):\nA JAX numpy array with the predicted values</li>\n<li><strong>true</strong> (jax.numpy.array):\nA JAX numpy array with the true values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mean square error</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span>, </span><span class=\"param\"><span class=\"n\">true</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.MSE_SA", "modulename": "jinnax.nn", "qualname": "MSE_SA", "kind": "function", "doc": "<h2 id=\"selft-adaptative-mean-square-error\">Selft-adaptative mean square error</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pred</strong> (jax.numpy.array):\nA JAX numpy array with the predicted values</li>\n<li><strong>true</strong> (jax.numpy.array):\nA JAX numpy array with the true values</li>\n<li><strong>wheight</strong> (jax.numpy.array):\nA JAX numpy array with the weights</li>\n<li><strong>c</strong> (float):\nHyperparameter</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>self-adaptative mean square error with sigmoid mask</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span>, </span><span class=\"param\"><span class=\"n\">true</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.L2error", "modulename": "jinnax.nn", "qualname": "L2error", "kind": "function", "doc": "<h2 id=\"l2-error\">L2-error</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pred</strong> (jax.numpy.array):\nA JAX numpy array with the predicted values</li>\n<li><strong>true</strong> (jax.numpy.array):\nA JAX numpy array with the true values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>L2-error</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span>, </span><span class=\"param\"><span class=\"n\">true</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.fconNN", "modulename": "jinnax.nn", "qualname": "fconNN", "kind": "function", "doc": "<h6 id=\"initialize-fully-connected-neural-network\">Initialize fully connected neural network</h6>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>width</strong> (list):\nList with the layers width</li>\n<li><strong>activation</strong> (jax.nn activation):\nThe activation function. Default jax.nn.tanh</li>\n<li><strong>key</strong> (int):\nSeed for parameters initialization. Default 0</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict with initial parameters and the function for the forward pass</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">activation</span><span class=\"o\">=&lt;</span><span class=\"n\">PjitFunction</span> <span class=\"n\">of</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">tanh</span><span class=\"o\">&gt;&gt;</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.get_activation", "modulename": "jinnax.nn", "qualname": "get_activation", "kind": "function", "doc": "<h6 id=\"return-activation-function-from-string\">Return activation function from string</h6>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>act</strong> (str):\nName of the activation function. Default 'tanh'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>jax.nn activation function</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">act</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.train_PINN", "modulename": "jinnax.nn", "qualname": "train_PINN", "kind": "function", "doc": "<h2 id=\"train-a-physics-informed-neural-network\">Train a Physics-informed Neural Network</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (dict):\nData generated by the jinnax.data.generate_PINNdata function</li>\n<li><strong>width</strong> (list):\nA list with the width of each layer</li>\n<li><strong>pde</strong> (function):\nThe partial differential operator. Its arguments are u, x and t</li>\n<li><strong>test_data</strong> (dict, None):\nA dictionay with test data for L2 error calculation generated by the jinnax.data.generate_PINNdata function. Default None for not calculating L2 error</li>\n<li><strong>epochs</strong> (int):\nNumber of training epochs. Default 100</li>\n<li><strong>at_each</strong> (int):\nSave results for epochs multiple of at_each. Default 10</li>\n<li><strong>activation</strong> (str):\nThe name of the activation function of the neural network. Default 'tanh'</li>\n<li><strong>neumann</strong> (logical):\nWhether to consider Neumann boundary conditions</li>\n<li><strong>oper_neumann</strong> (function):\nPenalization of Neumann boundary conditions</li>\n<li><strong>sa</strong> (logical):\nWhether to consider self-adaptative PINN</li>\n<li><strong>c</strong> (dict):\nDictionary with the hyperparameters of the self-adaptative sigmoid mask for the initial (w0), sensor (ws) and collocation (wr) points. The weights of the boundary points is fixed to 1</li>\n<li><strong>inverse</strong> (logical):\nWhether to estimate parameters of the PDE</li>\n<li><strong>initial_par</strong> (jax.numpy.array):\nInitial value of the parameters of the PDE in an inverse problem</li>\n<li><strong>lr,b1,b2,eps,eps_root</strong> (float):\nHyperparameters of the Adam algorithm. Default lr = 0.001, b1 = 0.9, b2 = 0.999, eps = 1e-08, eps_root = 0.0</li>\n<li><strong>key</strong> (int):\nSeed for parameters initialization. Default 0</li>\n<li><strong>epoch_print</strong> (int):\nNumber of epochs to calculate and print test errors. Default 100</li>\n<li><strong>save</strong> (logical):\nWhether to save the current parameters. Default False</li>\n<li><strong>file_name</strong> (str):\nFile prefix to save the current parameters. Default 'result_pinn'</li>\n<li><strong>exp_decay</strong> (logical):\nWhether to consider exponential decay of learning rate. Default False</li>\n<li><strong>transition_steps</strong> (int):\nNumber of steps for exponential decay. Default 1000</li>\n<li><strong>decay_rate</strong> (float):\nRate of exponential decay. Default 0.9</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict-like object with the estimated function, the estimated parameters, the neural network function for the forward pass and the training time</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">width</span>,</span><span class=\"param\">\t<span class=\"n\">pde</span>,</span><span class=\"param\">\t<span class=\"n\">test_data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">at_each</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">&#39;tanh&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">neumann</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">oper_neumann</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sa</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">c</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;ws&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wr&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w0&#39;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">inverse</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">initial_par</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">b1</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">b2</span><span class=\"o\">=</span><span class=\"mf\">0.999</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-08</span>,</span><span class=\"param\">\t<span class=\"n\">eps_root</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">epoch_print</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;result_pinn&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exp_decay</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">transition_steps</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">decay_rate</span><span class=\"o\">=</span><span class=\"mf\">0.9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.process_result", "modulename": "jinnax.nn", "qualname": "process_result", "kind": "function", "doc": "<h2 id=\"process-the-results-of-a-physics-informed-neural-network\">Process the results of a Physics-informed Neural Network</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>test_data</strong> (dict):\nA dictionay with test data for L2 error calculation generated by the jinnax.data.generate_PINNdata function</li>\n<li><strong>fit</strong> (function):\nThe fitted function</li>\n<li><strong>train_data</strong> (dict):\nTraining data generated by the jinnax.data.generate_PINNdata</li>\n<li><strong>plot</strong> (logical):\nWhether to generate plots comparing the exact and estimated solutions when the spatial dimension is one. Default True</li>\n<li><strong>plot_test</strong> (logical):\nWhether to plot the test data. Default True</li>\n<li><strong>times</strong> (int):\nNumber of points along the time interval to plot. Default 5</li>\n<li><strong>d2</strong> (logical):\nWhether to plot 2D plot when the spatial dimension is one. Default True</li>\n<li><strong>save</strong> (logical):\nWhether to save the plots. Default False</li>\n<li><strong>show</strong> (logical):\nWhether to show the plots. Default True</li>\n<li><strong>file_name</strong> (str):\nFile prefix to save the plots. Default 'result_pinn'</li>\n<li><strong>print_res</strong> (logical):\nWhether to print the L2 error. Default True</li>\n<li><strong>p</strong> (int):\nOutput dimension. Default 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas data frame with L2 and MSE errors</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">test_data</span>,</span><span class=\"param\">\t<span class=\"n\">fit</span>,</span><span class=\"param\">\t<span class=\"n\">train_data</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">plot_test</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;result_pinn&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">print_res</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.plot_pinn1D", "modulename": "jinnax.nn", "qualname": "plot_pinn1D", "kind": "function", "doc": "<h2 id=\"plot-the-prediction-of-a-1d-pinn\">Plot the prediction of a 1D PINN</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>times</strong> (int):\nNumber of points along the time interval to plot. Default 5</li>\n<li><strong>xt</strong> (jax.numpy.array):\nTest data xt array</li>\n<li><strong>u</strong> (jax.numpy.array):\nTest data u(x,t) array</li>\n<li><strong>upred</strong> (jax.numpy.array):\nPredicted upred(x,t) array on test data</li>\n<li><strong>d2</strong> (logical):\nWhether to plot 2D plot. Default True</li>\n<li><strong>save</strong> (logical):\nWhether to save the plots. Default False</li>\n<li><strong>show</strong> (logical):\nWhether to show the plots. Default True</li>\n<li><strong>file_name</strong> (str):\nFile prefix to save the plots. Default 'result_pinn'</li>\n<li><strong>title_1d</strong> (str):\nTitle of 1D plot</li>\n<li><strong>title_2d</strong> (str):\nTitle of 2D plot</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">times</span>,</span><span class=\"param\">\t<span class=\"n\">xt</span>,</span><span class=\"param\">\t<span class=\"n\">u</span>,</span><span class=\"param\">\t<span class=\"n\">upred</span>,</span><span class=\"param\">\t<span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;result_pinn&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_1d</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_2d</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.plot_pinn_out2D", "modulename": "jinnax.nn", "qualname": "plot_pinn_out2D", "kind": "function", "doc": "<h2 id=\"plot-the-prediction-of-a-pinn-with-2d-output\">Plot the prediction of a PINN with 2D output</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>times</strong> (int):\nNumber of points along the time interval to plot. Default 5</li>\n<li><strong>xt</strong> (jax.numpy.array):\nTest data xt array</li>\n<li><strong>u</strong> (jax.numpy.array):\nTest data u(x,t) array</li>\n<li><strong>upred</strong> (jax.numpy.array):\nPredicted upred(x,t) array on test data</li>\n<li><strong>save</strong> (logical):\nWhether to save the plots. Default False</li>\n<li><strong>show</strong> (logical):\nWhether to show the plots. Default True</li>\n<li><strong>file_name</strong> (str):\nFile prefix to save the plots. Default 'result_pinn'</li>\n<li><strong>title</strong> (str):\nTitle of plot</li>\n<li><strong>plot_test</strong> (logical):\nWhether to plot the test data. Default True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">times</span>,</span><span class=\"param\">\t<span class=\"n\">xt</span>,</span><span class=\"param\">\t<span class=\"n\">u</span>,</span><span class=\"param\">\t<span class=\"n\">upred</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;result_pinn&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">plot_test</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.get_train_data", "modulename": "jinnax.nn", "qualname": "get_train_data", "kind": "function", "doc": "<h6 id=\"process-training-sample\">Process training sample</h6>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>train_data</strong> (dict):\nA dictionay with train data generated by the jinnax.data.generate_PINNdata function</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict with the processed training data</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">train_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.process_training", "modulename": "jinnax.nn", "qualname": "process_training", "kind": "function", "doc": "<h2 id=\"process-the-training-of-a-physics-informed-neural-network\">Process the training of a Physics-informed Neural Network</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>test_data</strong> (dict):\nA dictionay with test data for L2 error calculation generated by the jinnax.data.generate_PINNdata function</li>\n<li><strong>file_name</strong> (str):\nName of the files saved during training</li>\n<li><strong>at_each</strong> (int):\nCompute results for epochs multiple of at_each. Default 100</li>\n<li><strong>bolstering</strong> (logical):\nWhether to compute bolstering mean square error. Default True</li>\n<li><strong>mc_sample</strong> (int):\nNumber of sample for Monte Carlo integration in bolstering. Default 10000</li>\n<li><strong>save</strong> (logical):\nWhether to save the training results. Default False</li>\n<li><strong>file_name_save</strong> (str):\nFile prefix to save the plots and the L2 error. Default 'result_pinn'</li>\n<li><strong>key</strong> (int):\nKey for random samples in bolstering. Default 0</li>\n<li><strong>ec</strong> (float):\nStopping criteria error for EM algorithm in bolstering. Default 1e-6</li>\n<li><strong>lamb</strong> (float):\nHyperparameter of EM algorithm in bolstering. Default 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas data frame with training results</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">test_data</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span>,</span><span class=\"param\">\t<span class=\"n\">at_each</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">bolstering</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">mc_sample</span><span class=\"o\">=</span><span class=\"mi\">10000</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">file_name_save</span><span class=\"o\">=</span><span class=\"s1\">&#39;result_pinn&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ec</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>,</span><span class=\"param\">\t<span class=\"n\">lamb</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.demo_train_pinn1D", "modulename": "jinnax.nn", "qualname": "demo_train_pinn1D", "kind": "function", "doc": "<h2 id=\"demo-video-with-the-training-of-a-1d-pinn\">Demo video with the training of a 1D PINN</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>test_data</strong> (dict):\nA dictionay with test data for L2 error calculation generated by the jinnax.data.generate_PINNdata function</li>\n<li><strong>file_name</strong> (str):\nName of the files saved during training</li>\n<li><strong>at_each</strong> (int):\nCompute results for epochs multiple of at_each. Default 100</li>\n<li><strong>times</strong> (int):\nNumber of points along the time interval to plot. Default 5</li>\n<li><strong>d2</strong> (logical):\nWhether to make video demo of 2D plot. Default True</li>\n<li><strong>file_name_save</strong> (str):\nFile prefix to save the plots and videos. Default 'result_pinn_demo'</li>\n<li><strong>title</strong> (str):\nTitle for plots</li>\n<li><strong>framerate</strong> (int):\nFramerate for video. Default 10</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">test_data</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span>,</span><span class=\"param\">\t<span class=\"n\">at_each</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">file_name_save</span><span class=\"o\">=</span><span class=\"s1\">&#39;result_pinn_demo&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">framerate</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.demo_time_pinn1D", "modulename": "jinnax.nn", "qualname": "demo_time_pinn1D", "kind": "function", "doc": "<h2 id=\"demo-video-with-the-time-evolution-of-a-1d-pinn\">Demo video with the time evolution of a 1D PINN</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>test_data</strong> (dict):\nA dictionay with test data for L2 error calculation generated by the jinnax.data.generate_PINNdata function</li>\n<li><strong>file_name</strong> (str):\nName of the files saved during training</li>\n<li><strong>epochs</strong> (list):\nWhich training epochs to plot</li>\n<li><strong>file_name_save</strong> (str):\nFile prefix to save the plots and video. Default 'result_pinn_time_demo'</li>\n<li><strong>title</strong> (str):\nTitle for plots</li>\n<li><strong>framerate</strong> (int):\nFramerate for video. Default 10</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">test_data</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">file_name_save</span><span class=\"o\">=</span><span class=\"s1\">&#39;result_pinn_time_demo&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">framerate</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "jinnax.nn.demo_time_pinn2D", "modulename": "jinnax.nn", "qualname": "demo_time_pinn2D", "kind": "function", "doc": "<h2 id=\"demo-video-with-the-time-evolution-of-a-2d-pinn\">Demo video with the time evolution of a 2D PINN</h2>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>test_data</strong> (dict):\nA dictionay with test data for L2 error calculation generated by the jinnax.data.generate_PINNdata function</li>\n<li><strong>file_name</strong> (str):\nName of the files saved during training</li>\n<li><strong>epochs</strong> (list):\nWhich training epochs to plot</li>\n<li><strong>file_name_save</strong> (str):\nFile prefix to save the plots and video. Default 'result_pinn_time_demo'</li>\n<li><strong>title</strong> (str):\nTitle for plots</li>\n<li><strong>framerate</strong> (int):\nFramerate for video. Default 10</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">test_data</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">file_name_save</span><span class=\"o\">=</span><span class=\"s1\">&#39;result_pinn_time_demo&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">framerate</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();